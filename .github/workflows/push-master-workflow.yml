name: Master CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Continuous Integration
    runs-on: ubuntu-18.04
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0
        with:
          ref: 'master'
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Run GitVersion
        uses: docker://gittools/gitversion:5.1.4-linux
        with:
          args: -output buildserver -nocache

      - name: Print GitHub Context # Debug step
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      # Optional step, add only for a specific dotnet version that doesn't come with ubuntu-latest / windows-latest
      # Visit bit.ly/2synnZl for a list of software that comes pre-installed with ubuntu-latest / windows-latest
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.100'

      - name: Disable .Net Welcome
        run: touch "$HOME/.dotnet/$(dotnet --version).dotnetFirstUseSentinel"

      - name: Install SonarCloud scanner
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 4.8.0
          echo "::set-env name=PATH::${PATH}:${HOME}/.dotnet/tools"

      - name: Start SonarCloud Scan
        run: dotnet sonarscanner begin /k:"magne_dfalex.net" /o:"magne"
              /v:$GitVersion_SemVer
              /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
              /d:sonar.host.url="https://sonarcloud.io"
              /d:sonar.cs.opencover.reportsPaths=**/TestResults/**/coverage.opencover.xml
              /d:sonar.cs.vstest.reportsPaths=**/TestResults/*.trx

      - name: Build
        run: dotnet build --configuration Release dfalex.sln

      - name: Test
        run: dotnet test --configuration Release --no-build --logger trx --collect:"XPlat Code Coverage" --settings coverletArgs.runsettings dfalex.sln

      - name: End SonarCloud Scan
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Pack Nuget packages
        if: contains(github.ref, 'tags')
        run: dotnet pack --configuration Release dfalex.sln

      - name: Create Release
        id: create_release
        if: contains(github.ref, 'tags')
        uses: actions/create-release@4d1b6075ce7561b672b8552148edec2f27584fe9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Release notes.
          draft: true
          prerelease: ${{ env.GitVersion_PreReleaseTag != '' }}

      - name: Upload Release Nuget package
        if: contains(github.ref, 'tags')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dfalex/bin/Release/CodeHive.DfaLex.${{ env.GitVersion_SemVer }}.nupkg
          asset_name: CodeHive.DfaLex.${{ env.GitVersion_SemVer }}.nupkg
          asset_content_type: application/zip

      - name: Upload Release Nuget symbol package
        if: contains(github.ref, 'tags')
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./dfalex/bin/Release/CodeHive.DfaLex.${{ env.GitVersion_SemVer }}.snupkg
          asset_name: CodeHive.DfaLex.${{ env.GitVersion_SemVer }}.snupkg
          asset_content_type: application/zip
